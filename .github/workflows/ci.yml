name: ci

on:
  pull_request:
  push:
    paths-ignore:
      - '**.md'

defaults:
  run:
    shell: bash

jobs:
  build:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest

    runs-on:
      - ${{ matrix.os }}
      # - ubuntu-latest

    steps:
    - name: Checkout project repository
      uses: actions/checkout@v2

    - name: Show stack version
      run: stack --version

    - name: Get stack root
      id: stack-root
      env:
        os: ${{ runner.os }}
      run: |
        case $os in
          "Linux")
             echo "::set-output name=path::$HOME/.stack"
             ;;
          "macOS")
             echo "::set-output name=path::$HOME/.stack"
             ;;
          "Windows")
             echo "::set-output name=path::C:/Users/runneradmin/AppData/Roaming/stack"
             ;;
          *)
             echo "Unknown os: $os"
        esac

      # run: |
      #   echo "::set-output name=path::$(stack path --stack-root)"

    - name: Cache stack root
      id: stack-global
      uses: actions/cache@v2
      with:
        # path: ~/.stack
        path: ${{ steps.stack-root.outputs.path }}
        key: ${{ runner.os }}-stack-global-${{ hashFiles('**.yaml') }}
        restore-keys: |
          ${{ runner.os }}-stack-global
          ${{ runner.os }}-stack

    # - name: Cache stack-installed programs in ~/.local/bin
    #   id: stack-programs
    #   uses: actions/cache@v2
    #   with:
    #     path: ~/.local/bin
    #     key: ${{ runner.os }}-stack-programs-${{ hashFiles('**.yaml') }}
    #     restore-keys: |
    #       ${{ runner.os }}-stack-programs
    #       ${{ runner.os }}-local-bin

    # - name: Cache .stack-work
    #   uses: actions/cache@v2
    #   with:
    #     path: .stack-work
    #     key: ${{ runner.os }}-stack-work-${{ hashFiles('**.yaml') }}
    #     restore-keys: ${{ runner.os }}-stack-work

    - name: Setup stack
      run: stack setup

    - name: Install dependency packages
      run: stack build --fast --test --coverage --only-dependencies

    - name: Build packages
      run: stack build --fast --test --coverage --no-run-tests

    - name: Run tests
      run: stack build --fast --test --coverage

    - name: Generate coverage report
      run: |
        STACK="stack"
        HPCROOT=$($STACK path --local-hpc-root)
        TIX=$(find $HPCROOT -name 'test-main.tix')
        MIX=$($STACK path --dist-dir)/hpc
        $STACK exec -- hpc-codecov --mix=$MIX -o codecov.json $TIX

    - name: Upload coverage report
      run: bash <(curl -s https://codecov.io/bash)
